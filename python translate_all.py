# ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–≤—ã–ø–æ–ª–Ω—è–π –û–î–ò–ù –†–ê–ó –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, –Ω–µ –≤ –∫–æ–¥–µ!)
# pip install datasets transformers pandas tqdm

# üì¶ –ò–º–ø–æ—Ä—Ç—ã
import torch
import pandas as pd
from tqdm import tqdm
from datasets import load_dataset
from transformers import pipeline

# üì• –°–ø–∏—Å–æ–∫ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ –∏ –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
dataset_names = [
    "UniversalCEFR/caes_es",       # –∏—Å–ø–∞–Ω—Å–∫–∏–π
    "UniversalCEFR/cefr_sp_en",    # –∏—Å–ø–∞–Ω—Å–∫–∏–π ‚Üî –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    "UniversalCEFR/cefr_asag_en",  # –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    "UniversalCEFR/merlin_de",     # –Ω–µ–º–µ—Ü–∫–∏–π
    "UniversalCEFR/kwiqiz_fr",     # —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π
    "UniversalCEFR/elle_et",       # —ç—Å—Ç–æ–Ω—Å–∫–∏–π
]

lang_to_model = {
    "es": "Helsinki-NLP/opus-mt-es-eo",
    "en": "Helsinki-NLP/opus-mt-en-eo",
    "de": "Helsinki-NLP/opus-mt-de-eo",
    "fr": "Helsinki-NLP/opus-mt-fr-eo",
    "et": "Helsinki-NLP/opus-mt-et-eo",
}

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
dfs = []
for dataset_name in dataset_names:
    print(f"üîΩ –ó–∞–≥—Ä—É–∂–∞–µ–º {dataset_name}...")
    dataset = load_dataset(dataset_name, split="train")
    df = dataset.to_pandas()
    dfs.append(df)

combined_df = pd.concat(dfs, ignore_index=True)
print(f"‚úÖ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(combined_df)}")

# üéØ –¢–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
df = combined_df[["text", "cefr_level", "lang"]].dropna()

# üîÅ –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
translated_texts = []
current_lang = None
translator = None

print("üîÑ –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —ç—Å–ø–µ—Ä–∞–Ω—Ç–æ...")
for i, row in tqdm(df.iterrows(), total=len(df)):
    text = row["text"]
    lang = row["lang"]

    if lang != current_lang:
        model_name = lang_to_model.get(lang)
        if model_name is None:
            translated_texts.append("N/A")
            continue
        print(f"\nüåê –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {model_name}")
        translator = pipeline("translation", model=model_name,
                              device=0 if torch.cuda.is_available() else -1)
        current_lang = lang

    try:
        translated = translator(text[:512])[0]["translation_text"]
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        translated = "N/A"

    translated_texts.append(translated)

# üß™ –î–æ–±–∞–≤–∏–º –∫–æ–ª–æ–Ω–∫—É
df["esperanto"] = translated_texts

# üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
output_file = "translated_cefr_dataset.csv"
df.to_csv(output_file, index=False)
print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_file}")
