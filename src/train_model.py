import pandas as pd
import joblib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns


def main():
    print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç: data/translated_cefr_dataset.csv")
    df = pd.read_csv("data/translated_cefr_dataset.csv")

    if not {"esperanto", "cefr_level"}.issubset(df.columns):
        raise ValueError(
            "‚ùå –í –¥–∞—Ç–∞—Å–µ—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–æ–Ω–∫–∏ 'esperanto' –∏ 'cefr_level'.")

    X_text = df["esperanto"].astype(str)
    y = df["cefr_level"]

    print("üß† –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ (TF-IDF)...")
    vectorizer = TfidfVectorizer(max_features=5000)
    X = vectorizer.fit_transform(X_text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä
    joblib.dump(X, "X_combined.joblib")
    joblib.dump(y, "y.joblib")
    joblib.dump(vectorizer, "cefr_vectorizer_extended.joblib")

    print("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤:")
    print(pd.Series(y).value_counts())

    # –î–µ–ª–∏–º –Ω–∞ train/test
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, stratify=y, random_state=42
    )

    # –°–µ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    param_grid = {
        "C": [0.01, 0.1, 1, 10],
        "penalty": ["l2"],
        "solver": ["saga"],
        "class_weight": [None, "balanced"],
    }

    print("üîé GridSearchCV –¥–ª—è LogisticRegression...")
    grid = GridSearchCV(
        LogisticRegression(max_iter=2000),
        param_grid,
        cv=5,
        scoring="accuracy",
        verbose=1,
        n_jobs=-1,
    )
    grid.fit(X_train, y_train)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_df = pd.DataFrame(grid.cv_results_).sort_values(
        by="mean_test_score", ascending=False)
    results_df.to_csv("grid_search_results_extended.csv", index=False)
    print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ grid_search_results_extended.csv")

    print(f"‚úÖ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {grid.best_estimator_}")
    print(f"üìà –õ—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {grid.best_score_:.4f}")

    # –û—Ü–µ–Ω–∫–∞ –Ω–∞ —Ç–µ—Å—Ç–µ
    y_pred = grid.predict(X_test)
    print("üîç –û—Ç—á—ë—Ç –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
    print(classification_report(y_test, y_pred))

    # –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫
    cm = confusion_matrix(y_test, y_pred, labels=sorted(set(y)))
    plt.figure(figsize=(8, 6))
    sns.heatmap(cm, annot=True, fmt="d", xticklabels=sorted(
        set(y)), yticklabels=sorted(set(y)), cmap="Blues")
    plt.xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ")
    plt.ylabel("–ò—Å—Ç–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    plt.title("üìâ –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏)")
    plt.tight_layout()
    plt.savefig("confusion_matrix_extended.png")
    plt.close()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
    joblib.dump(grid.best_estimator_, "cefr_model_extended.joblib")
    print("‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: cefr_model_extended.joblib")


if __name__ == "__main__":
    main()
